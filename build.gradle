// java開発プラグイン
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

// CI系プラグイン
apply plugin: 'jacoco'
apply plugin: "findbugs"
apply plugin: "pmd"

// ↓ここからが文字エンコーディング指定
// 普通にGroovyコードがかけるので、このようにdefaultEncodingローカル変数など
// を使って、DRYに指定することもできます。(その下がDRYっぽく見えないのは置いといて)
// at Gradleでエンコーディングを指定する方法 [http://nobeans.hatenablog.com/entry/20091104/1257344503]
def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava, javadoc]*.options*.encoding = defaultEncoding
javadoc.options.charSet = defaultEncoding

// アプリケーション設定
sourceCompatibility = '1.6'                    // ソースのコンパイルJDKバージョン指定
targetCompatibility = '1.6'                       // 成果物のコンパイルJDKバージョン指定
group = 'tools'                                  // ソースのグループ設定（任意）
archivesBaseName = 'prefdumper'                   // 成果物のファイル名称（アプリ名）

// バージョン番号の生成
// - バージョン番号はプロジェクトフォルダ配下の「version.txt」にて管理
def snapshot_flg = false                          // trueの場合は「-SNAPSHOT」が付与される。
// - バージョン番号は、version.txtの番号のbuildに+1した値となる。
def baseVersion = new File(projectDir, 'version.txt').text.replaceAll(/^([^\.]+)\.([^\.]+)\.([^\.]+)/) { all, major, minor, build ->
	major + '.' + minor + '.' + ((build as long) + 1)
}
// - ビルドを行ったらbuildバージョンが自動で加算される。
task versionUp << {
	new File(projectDir, 'version.txt').text = baseVersion
}
compileJava.dependsOn versionUp

mainClassName = "${group}.${archivesBaseName}.Application"      // 起動ポイントとなるMainClassのフルパス
version = "${baseVersion}" + (snapshot_flg ? '-SNAPSHOT' : '') // バージョン

repositories {
	mavenCentral()
}

// 依存関係のパターンを拡張するための記述
// [memo] 使う前に宣言しなければならないため、dependenciesの前に記載
configurations {
    provided
}
sourceSets {
    main.compileClasspath = main.compileClasspath + configurations.provided
    test.compileClasspath = test.compileClasspath + configurations.provided
    test.runtimeClasspath = test.runtimeClasspath + configurations.provided
}

dependencies {
	// https://tomcat.apache.org/tomcat-7.0-doc/building.html
	// ログ用
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
//	compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.21'
//	compile group: 'log4j', name: 'log4j', version: '1.2.17'
//	compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.21'
	compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.21'
	compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.7'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

	// DIコンテナ
	compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
	compile group: 'com.google.inject.extensions', name: 'guice-multibindings', version: '4.1.0'

	// procrun用
	compile group: 'commons-daemon', name: 'commons-daemon', version: '1.0.15'

	// JSONパーサ
//	compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
//	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.2'
//	compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.2'
//	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.2'
	// いろいろ試したけどJDK6だと動かなかったので、Jolokia-clientについてきているSimpleJSONを使おうと思う。

	// Jolokia
	compile group: 'org.jolokia', name: 'jolokia-client-java', version: '1.3.4'

	// provided（コンパイル後は不要になるもの）
	provided("org.projectlombok:lombok:1.16.10")

	// テスト用
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

/** ここからは基本的にそのまま使う **********************************************************************/

// Eclipse用のメタファイル生成処理
// gradleプロジェクトとして認識させるためbuildship用の設定を生成する。
// ※ [TODO] .settings内のファイルのみ生成していない。現状は手動作成。
eclipse {

	classpath {
		containers 'org.eclipse.buildship.core.gradleclasspathcontainer'

		plusConfigurations += [configurations.provided]
		noExportConfigurations += [configurations.provided]
	}

	project {
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		buildCommand 'org.eclipse.buildship.core.gradleprojectbuilder'
	}
}

// CI用のプラグイン設定
findbugs {
  ignoreFailures = true
  toolVersion = "3.0.1"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = "max"
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
  	"java-basic",
  	"java-design",
  	"java-imports",
  	"java-braces",
  	"java-strings"
  ]
}

// JaCoCo coverage reports
jacoco {
  applyTo(tasks.withType(JavaExec))
}
test {
  jacoco {
    enabled = true
    destinationFile = file('build/reports/jacoco/jacoco.exec')
  }
}
task jacocoReport(type: JacocoReport) {
  executionData test
  sourceSets project.sourceSets.main
}

// checkにCPDを追加
check << {
  File outDir = new File('build/reports/pmd/')
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml',
    outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: "src/main/java") {
      include(name: '**/*.java')
    }
  }
}

// ラッパーのバージョン指定。
// とりあえず開発時のバージョンを指定。
task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
